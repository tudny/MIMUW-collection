-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from ParExp.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp_internal -> Exp                        (0)
	%start_pExp1_internal -> Exp1                      (1)
	Integer -> L_integ                                 (2)
	Exp -> Exp '*' Exp1                                (3)
	Exp -> Exp '+' Exp1                                (4)
	Exp -> Exp1                                        (5)
	Exp1 -> Integer                                    (6)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'*'            { PT _ (TS _ 1) }
	'+'            { PT _ (TS _ 2) }
	L_integ        { PT _ (TI _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp_internal rule  0
	%start_pExp1_internal rule  1
	Integer         rule  2
	Exp             rules 3, 4, 5
	Exp1            rule  6

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExp_internal -> . Exp                       (rule 0)

	L_integ        shift, and enter state 3

	Integer        goto state 4
	Exp            goto state 6
	Exp1           goto state 7

State 1

	%start_pExp1_internal -> . Exp1                     (rule 1)

	L_integ        shift, and enter state 3

	Integer        goto state 4
	Exp1           goto state 5

State 2

	Integer -> . L_integ                                (rule 2)

	L_integ        shift, and enter state 3


State 3

	Integer -> L_integ .                                (rule 2)

	'*'            reduce using rule 2
	'+'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	Exp1 -> Integer .                                   (rule 6)

	'*'            reduce using rule 6
	'+'            reduce using rule 6
	%eof           reduce using rule 6


State 5

	%start_pExp1_internal -> Exp1 .                     (rule 1)

	%eof           accept


State 6

	%start_pExp_internal -> Exp .                       (rule 0)
	Exp -> Exp . '*' Exp1                               (rule 3)
	Exp -> Exp . '+' Exp1                               (rule 4)

	'*'            shift, and enter state 8
	'+'            shift, and enter state 9
	%eof           accept


State 7

	Exp -> Exp1 .                                       (rule 5)

	'*'            reduce using rule 5
	'+'            reduce using rule 5
	%eof           reduce using rule 5


State 8

	Exp -> Exp '*' . Exp1                               (rule 3)

	L_integ        shift, and enter state 3

	Integer        goto state 4
	Exp1           goto state 11

State 9

	Exp -> Exp '+' . Exp1                               (rule 4)

	L_integ        shift, and enter state 3

	Integer        goto state 4
	Exp1           goto state 10

State 10

	Exp -> Exp '+' Exp1 .                               (rule 4)

	'*'            reduce using rule 4
	'+'            reduce using rule 4
	%eof           reduce using rule 4


State 11

	Exp -> Exp '*' Exp1 .                               (rule 3)

	'*'            reduce using rule 3
	'+'            reduce using rule 3
	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 7
Number of terminals: 3
Number of non-terminals: 5
Number of states: 12

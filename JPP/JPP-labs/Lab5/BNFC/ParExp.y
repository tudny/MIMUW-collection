-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParExp
  ( happyError
  , myLexer
  , pExp
  , pExp1
  ) where

import Prelude

import qualified AbsExp
import LexExp

}

%name pExp_internal Exp
%name pExp1_internal Exp1
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '*'      { PT _ (TS _ 1) }
  '+'      { PT _ (TS _ 2) }
  L_integ  { PT _ (TI _)   }

%%

Integer :: { (AbsExp.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry AbsExp.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

Exp :: { (AbsExp.BNFC'Position, AbsExp.Exp) }
Exp
  : Exp '*' Exp1 { (fst $1, AbsExp.EMul (fst $1) (snd $1) (snd $3)) }
  | Exp '+' Exp1 { (fst $1, AbsExp.EAdd (fst $1) (snd $1) (snd $3)) }
  | Exp1 { (fst $1, (snd $1)) }

Exp1 :: { (AbsExp.BNFC'Position, AbsExp.Exp) }
Exp1 : Integer { (fst $1, AbsExp.EInt (fst $1) (snd $1)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pExp :: [Token] -> Err AbsExp.Exp
pExp = fmap snd . pExp_internal

pExp1 :: [Token] -> Err AbsExp.Exp
pExp1 = fmap snd . pExp1_internal
}


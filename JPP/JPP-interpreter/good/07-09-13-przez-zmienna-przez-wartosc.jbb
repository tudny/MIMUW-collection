
// Przekazanie przez `val` sprawi tylko, że nie będziemy mogli 
// zmienić wartości zmiennej wewnątrz funkcji.
// Nie ma znaczenia semantycznie czy będzie z tego kopia czy nie.
// Przy tak prostych typach jak `Integer` i `Boolean` nie ma większej różnicy
// czasowej.
// W poniższych przykładach zajmiemy się tylko przekazywaniem przez `var`.

fun foo(var x: Integer) : Integer {
    return x + 1;
}

var x: Integer = 42;
var y: Integer = foo(x);
writeInt(x);
writeInt(y);
// wypisze "42", "43"

fun inc(var x: Integer) : Unit {
    x = x + 1;
}

var x: Integer = 42;
inc(x);
writeInt(x);
// wypisze "43"


fun inc(var x: new Integer) : Unit {
    x = x + 1;
}

var x: Integer = 42;
inc(x);
writeInt(x);
// wypisze "42"


fun bar(var x: Integer) : Integer {
    fun check(var z: new Integer) : Boolean {
        z = 3 * z;
        z = 2 * z;
        x = 2 * x; // tutaj zmieni się oryginalna zmienna
        return z % 6 == 0;
    }

    if check(x) { // tytaj zostanie przekazana kopia
        return x / 2;
    } else {
        return 0;
    }
}

var x: Integer = 42;
var y: Integer = bar(x);
writeInt(x);
writeInt(y);
// wypisze "84", "42"


fun xyz(var x: Integer) : Unit {
    fun abc(var y: Integer) : Unit {
        fun def(var z: Integer) : Unit {
            z = 2 * z;
        }
        y = 2 * y;
    }
    x = 2 * x;
}

var x: Integer = 42;
xyz(x);
writeInt(x);
// wypisze "84"


fun xyz(var x: Integer) : Unit {
    fun abc(var y: Integer) : Unit {
        fun def(var z: Integer) : Unit {
            z = 2 * z;
        }
        def(y);
        y = 2 * y;
    }
    abc(x);
    x = 2 * x;
}

var x: Integer = 42;
xyz(x);
writeInt(x);
// wypisze "336"

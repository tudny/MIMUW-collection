
fun gcd(val a: new Integer, val b: new Integer): Integer {
    if b == 0 {
        return a;
    } else {
        return gcd(b, a % b);
    }
}

val pi: Integer = 3;
val e: Integer = 2;

fun power(val a: new Integer, val b: new Integer): Integer {
    if b == 0 {
        return 1;
    } else {
        return a * power(a, b - 1);
    }
}

fun fastPower(val a: new Integer, val b: new Integer): Integer {
    if b == 0 {
        return 1;
    } else if b % 2 == 0 {
        val x = fastPower(a, b / 2);
        return x * x;
    } else {
        return a * fastPower(a, b - 1);
    }
}

fun fastPowerIteration(var y: new Integer, var n: new Integer): Integer {
    var x = 1;
    while n > 0 {
        if n % 2 == 1 {
            x = x * y;
        }
        y = y * y;
        n = n / 2;
    }
    return x;
}

fun fib(val n: new Integer): Integer {
    if n == 0 {
        return 0;
    } else if n == 1 {
        return 1;
    } else {
        return fib(n - 1) + fib(n - 2);
    }
}

fun fastFib(val n: new Integer): Integer {
    fun fibIter(val a: new Integer, val b: new Integer, val n: new Integer): Integer {
        if n == 0 {
            return a;
        } else {
            return fibIter(b, a + b, n - 1);
        }
    }
    return fibIter(0, 1, n);
}

fun fastFibIteration(var a: new Integer, var b: new Integer, var n: new Integer): Integer {
    while n > 0 {
        val c = a + b;
        a = b;
        b = c;
        n = n - 1;
    }
    return a;
}

assert(1 == 1);
assert(1 != 2);
assert(true);

-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Src.Jabba.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Src.Jabba.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Src.Jabba.Abs.Ident -> Result
transIdent x = case x of
  Src.Jabba.Abs.Ident string -> failure x

transProgram :: Show a => Src.Jabba.Abs.Program' a -> Result
transProgram x = case x of
  Src.Jabba.Abs.PProgram _ instrs -> failure x

transInstr :: Show a => Src.Jabba.Abs.Instr' a -> Result
transInstr x = case x of
  Src.Jabba.Abs.DFun _ ident args type_ block -> failure x
  Src.Jabba.Abs.DFunUnit _ ident args block -> failure x
  Src.Jabba.Abs.IUnit _ -> failure x
  Src.Jabba.Abs.IIncr _ ident -> failure x
  Src.Jabba.Abs.IDecr _ ident -> failure x
  Src.Jabba.Abs.IAss _ ident expr -> failure x
  Src.Jabba.Abs.IRet _ expr -> failure x
  Src.Jabba.Abs.IRetUnit _ -> failure x
  Src.Jabba.Abs.IBreak _ -> failure x
  Src.Jabba.Abs.ICont _ -> failure x
  Src.Jabba.Abs.IIf _ ifstmt -> failure x
  Src.Jabba.Abs.IWhile _ expr block -> failure x
  Src.Jabba.Abs.IWhileFin _ expr block1 block2 -> failure x
  Src.Jabba.Abs.IFor _ ident expr1 expr2 block -> failure x
  Src.Jabba.Abs.IExpr _ expr -> failure x
  Src.Jabba.Abs.IDecl _ decl -> failure x
  Src.Jabba.Abs.IBBlock _ block -> failure x
  Src.Jabba.Abs.ITabAss _ ident expr1 expr2 -> failure x

transArg :: Show a => Src.Jabba.Abs.Arg' a -> Result
transArg x = case x of
  Src.Jabba.Abs.RefMutArg _ ident type_ -> failure x
  Src.Jabba.Abs.RefConstArg _ ident type_ -> failure x
  Src.Jabba.Abs.CopyMutArg _ ident type_ -> failure x
  Src.Jabba.Abs.CopyConstArg _ ident type_ -> failure x

transItem :: Show a => Src.Jabba.Abs.Item' a -> Result
transItem x = case x of
  Src.Jabba.Abs.DItemVal _ ident type_ expr -> failure x
  Src.Jabba.Abs.DItemAuto _ ident expr -> failure x
  Src.Jabba.Abs.DItem _ ident type_ -> failure x

transDecl :: Show a => Src.Jabba.Abs.Decl' a -> Result
transDecl x = case x of
  Src.Jabba.Abs.DVar _ items -> failure x
  Src.Jabba.Abs.DVal _ items -> failure x

transBlock :: Show a => Src.Jabba.Abs.Block' a -> Result
transBlock x = case x of
  Src.Jabba.Abs.IBlock _ instrs -> failure x

transIfStmt :: Show a => Src.Jabba.Abs.IfStmt' a -> Result
transIfStmt x = case x of
  Src.Jabba.Abs.IfIf _ expr block -> failure x
  Src.Jabba.Abs.IfElse _ expr block1 block2 -> failure x
  Src.Jabba.Abs.IfElseIf _ expr block ifstmt -> failure x

transType :: Show a => Src.Jabba.Abs.Type' a -> Result
transType x = case x of
  Src.Jabba.Abs.TInt _ -> failure x
  Src.Jabba.Abs.TBool _ -> failure x
  Src.Jabba.Abs.TString _ -> failure x
  Src.Jabba.Abs.TVoid _ -> failure x
  Src.Jabba.Abs.TFun _ targs type_ -> failure x
  Src.Jabba.Abs.TTab _ type_ -> failure x

transTArg :: Show a => Src.Jabba.Abs.TArg' a -> Result
transTArg x = case x of
  Src.Jabba.Abs.TRefMutArg _ type_ -> failure x
  Src.Jabba.Abs.TRefConstArg _ type_ -> failure x
  Src.Jabba.Abs.TCopyMutArg _ type_ -> failure x
  Src.Jabba.Abs.TCopyConstArg _ type_ -> failure x

transPlsOp :: Show a => Src.Jabba.Abs.PlsOp' a -> Result
transPlsOp x = case x of
  Src.Jabba.Abs.OPlus _ -> failure x
  Src.Jabba.Abs.OMinus _ -> failure x

transMulOp :: Show a => Src.Jabba.Abs.MulOp' a -> Result
transMulOp x = case x of
  Src.Jabba.Abs.OMul _ -> failure x
  Src.Jabba.Abs.ODiv _ -> failure x
  Src.Jabba.Abs.OMod _ -> failure x

transNotOp :: Show a => Src.Jabba.Abs.NotOp' a -> Result
transNotOp x = case x of
  Src.Jabba.Abs.ONot _ -> failure x

transNegOp :: Show a => Src.Jabba.Abs.NegOp' a -> Result
transNegOp x = case x of
  Src.Jabba.Abs.ONeg _ -> failure x

transAndOp :: Show a => Src.Jabba.Abs.AndOp' a -> Result
transAndOp x = case x of
  Src.Jabba.Abs.OAnd _ -> failure x

transOrOp :: Show a => Src.Jabba.Abs.OrOp' a -> Result
transOrOp x = case x of
  Src.Jabba.Abs.OOr _ -> failure x

transRelOp :: Show a => Src.Jabba.Abs.RelOp' a -> Result
transRelOp x = case x of
  Src.Jabba.Abs.REq _ -> failure x
  Src.Jabba.Abs.RNeq _ -> failure x
  Src.Jabba.Abs.RLt _ -> failure x
  Src.Jabba.Abs.RGt _ -> failure x
  Src.Jabba.Abs.RLeq _ -> failure x
  Src.Jabba.Abs.RGeq _ -> failure x

transExpr :: Show a => Src.Jabba.Abs.Expr' a -> Result
transExpr x = case x of
  Src.Jabba.Abs.ITabAcc _ ident expr -> failure x
  Src.Jabba.Abs.ITabInit _ expr1 expr2 -> failure x
  Src.Jabba.Abs.ITabInitEls _ exprs -> failure x
  Src.Jabba.Abs.EVarName _ ident -> failure x
  Src.Jabba.Abs.EIntLit _ integer -> failure x
  Src.Jabba.Abs.EBoolLitTrue _ -> failure x
  Src.Jabba.Abs.EBoolLitFalse _ -> failure x
  Src.Jabba.Abs.EUnitLiteral _ -> failure x
  Src.Jabba.Abs.EStringLit _ string -> failure x
  Src.Jabba.Abs.ERun _ expr exprs -> failure x
  Src.Jabba.Abs.ELambda _ args block -> failure x
  Src.Jabba.Abs.ELambdaEmpty _ block -> failure x
  Src.Jabba.Abs.ENeg _ negop expr -> failure x
  Src.Jabba.Abs.ENot _ notop expr -> failure x
  Src.Jabba.Abs.EMul _ expr1 mulop expr2 -> failure x
  Src.Jabba.Abs.ESum _ expr1 plsop expr2 -> failure x
  Src.Jabba.Abs.ERel _ expr1 relop expr2 -> failure x
  Src.Jabba.Abs.EBAnd _ expr1 andop expr2 -> failure x
  Src.Jabba.Abs.EBOr _ expr1 orop expr2 -> failure x
  Src.Jabba.Abs.ETer _ expr1 expr2 expr3 -> failure x
  Src.Jabba.Abs.ELambdaExpr _ args expr -> failure x
  Src.Jabba.Abs.ELambdaEmptEpr _ expr -> failure x

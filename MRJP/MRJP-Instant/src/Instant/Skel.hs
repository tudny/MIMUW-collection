-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Instant.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Instant.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Instant.Abs.Ident -> Result
transIdent x = case x of
  Instant.Abs.Ident string -> failure x

transProgram :: Show a => Instant.Abs.Program' a -> Result
transProgram x = case x of
  Instant.Abs.Prog _ stmts -> failure x

transStmt :: Show a => Instant.Abs.Stmt' a -> Result
transStmt x = case x of
  Instant.Abs.SAss _ ident exp -> failure x
  Instant.Abs.SExp _ exp -> failure x

transExp :: Show a => Instant.Abs.Exp' a -> Result
transExp x = case x of
  Instant.Abs.ExpAdd _ exp1 exp2 -> failure x
  Instant.Abs.ExpSub _ exp1 exp2 -> failure x
  Instant.Abs.ExpMul _ exp1 exp2 -> failure x
  Instant.Abs.ExpDiv _ exp1 exp2 -> failure x
  Instant.Abs.ExpLit _ integer -> failure x
  Instant.Abs.ExpVar _ ident -> failure x

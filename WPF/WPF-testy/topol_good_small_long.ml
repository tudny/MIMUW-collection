open Topol;;

exception False_exp
;;

exception True_exp
;;

let are_duplicates li = 
  let li = List.sort compare li in
  match li with
  | [] | [_] -> false
  | hd :: tl -> try let _ = List.fold_left
    ( fun last ele ->
      if ele = last then raise True_exp
      else ele
    ) hd tl in false
    with
    | True_exp -> true
;;

let remove_duplicates = function 
  | [] -> []
  | [x] -> [x]
  | hd :: tl ->
    List.fold_left ( fun (last, acc) ele ->
      if ele = last then (ele, acc)
      else (ele, ele :: acc)
    ) (hd, [hd]) tl |> snd |> List.rev
;;

let does_match data output = 
  let (first, second) = List.split data in
  let data = first @ List.flatten second in
  let data = List.sort compare data |> remove_duplicates
  and output = List.sort compare output in
  data = output
;;

let verify data output = 
  if are_duplicates output then false else
  if does_match data output |> not then false else

  let (map, _) = List.fold_left ( fun (_acc, iter) ele ->
      (PMap.add ele iter _acc, iter + 1)
    ) (PMap.empty, 0) output in

  let get_id ele = PMap.find ele map in

  let single (x, row) = 
    let x_id = get_id x in
    List.iter ( fun ele ->
      let ele_id = get_id ele in
      if x_id >= ele_id then raise False_exp
    ) row in 

  try
    List.iter ( fun ele -> 
      single ele
    ) data; true
  with
  | False_exp -> false
;;
assert ((let data = [(322, [135; 421; 221; 743; 672; 394; 942; 579; 855; 697; 24; 331; 949; 392; 984; 107; 983; 854; 297; 485; 81; 375; 252; 11; 841; 174; 317; 308; 418; 282; 608; 492; 686; 404; 690; 87; 239; 247; 153; 669; 891; 947; 223; 948; 612; 135; 599; 794; 296; 7; 393; 209; 881; 866; 567; 626; 551; 662; 36; 406; 153; 537; 435; 990; 634; 899; 107; 836; 585; 669; 533; 177; 547; 286; 112; 698; 313; 226; 275; 25; 436; 471; 124; 838; 129; 890; 57; 696; 770; 587; 984; 216; 507; 288; 959; 721; 414; 748; 650; 910; 839; 215; 323; 113; 397; 770; 87; 48; 758; 690; 584; 863; 906; 293; 405; 767; 30; 991; 18; 912; 333; 165; 196; 683; 645; 312; 670; 252; 892; 341; 428; 101; 317; 590; 276; 590; 375; 824; 270; 211; 857; 881; 516; 693; 250; 634; 8; 844; 443; 654; 856; 965; 872; 319; 302; 742; 699; 737; 837; 612; 397; 60; 790; 350; 819; 698; 190; 19; 27; 570; 605; 1; 360; 360; 877; 168; 295; 873; 193; 912; 425; 937; 401; 122; 780; 372; 311; 780; 582; 597; 238; 159; 634; 537; 401; 657; 342; 146; 802; 918; 324; 143; 483; 530; 25; 912; 581; 547; 358; 933; 427; 729; 965; 72; 211; 53; 425; 59; 795; 995; 162; 42; 221; 110; 244; 479; 357; 820; 152; 963; 589; 568; 357; 272; 471; 518; 777; 332; 723; 742; 946; 69; 804; 391; 434; 179; 924; 504; 278; 935; 297; 367; 997; 844; 332; 743; 595; 208; 893; 501; 974; 242; 825; 452; 989; 188; 925; 420; 632; 837; 940; 758; 782; 876; 681; 795; 891; 193; 580; 331; 884; 165; 916; 499; 825; 176; 740; 755; 277; 83; 588; 190; 546; 729; 622; 997; 281; 940; 718; 639; 121; 582; 761; 951; 46; 969; 442; 332; 860; 990; 12; 655; 774; 652; 912; 630; 516; 921; 830; 804; 927; 826; 719; 999; 712; 193; 796; 624; 828; 550; 198; 544; 332; 605; 112; 44; 188; 76; 604; 997; 650; 818; 919; 304; 152; 579; 478; 555; 26; 425; 49; 486; 106; 985; 272; 584; 262; 157; 658; 6; 596; 170; 542; 695; 136; 188; 540; 317; 486; 154; 164; 773; 713; 222; 575; 452; 729; 726; 571; 931; 776; 648; 975; 651; 958; 30; 803; 453; 274; 909; 340; 871; 588; 434; 816; 676; 938; 551; 580; 538; 861; 753; 788; 95; 465; 401; 338; 267; 31; 244; 589; 826; 697; 585; 498; 748; 596; 106; 872; 462; 56; 835; 588; 751; 98; 416; 833; 623; 743; 197; 965; 274; 692; 337; 333; 958; 938; 387; 156; 41; 274; 715; 580; 825; 683; 340; 105; 659; 168; 406; 842; 301; 819; 381; 378; 424; 856; 454; 575; 507; 268; 944; 104; 823; 780; 711; 263; 716; 707; 165; 628; 946; 756; 466; 620; 559; 35; 181; 369; 678; 381; 393; 856; 253; 921; 29; 191; 703; 370; 435; 497; 22; 488; 837; 222; 332; 956; 114; 184; 126; 139; 747; 288; 473; 873; 286; 440; 367; 293; 178; 36; 138; 905; 132; 840; 44; 303; 86; 604; 433; 777; 132; 363; 567; 866; 894; 651; 81; 409; 142; 129; 501; 889; 10; 468; 57; 484; 716; 410; 691; 726; 110; 103; 935; 465; 361; 474; 724; 978; 332; 530; 707; 537; 46; 809; 638; 860; 123; 9; 637; 801; 521; 943; 609; 426; 936; 45; 781; 511; 474; 570; 378; 104; 272; 738; 55; 395; 326; 752; 212; 26; 348; 70; 606; 328; 425; 553; 93; 414; 340; 0; 538; 46; 937; 116; 170; 5; 827; 12; 408; 778; 961; 986; 566; 142; 185; 455; 941; 520; 226; 901; 606; 723; 497; 620; 89; 466; 23; 307; 247; 912; 211; 620; 117; 513; 434; 394; 369; 953; 556; 446; 460; 803; 330; 112; 226; 439; 383; 834; 48; 975; 340; 629; 992; 273; 791; 721; 929; 255; 688; 779; 475; 874; 475; 793; 316; 150; 658; 455; 914; 547; 64; 918; 286; 249; 563; 827; 732; 30; 818; 182; 545; 761; 607; 455; 254; 344; 139; 323; 210; 118; 736; 907; 850; 829; 384; 346; 347; 96; 528; 227; 701; 194; 9; 859; 425; 591; 21; 338; 18; 295; 570; 423; 858; 405; 40; 581; 850; 640; 228; 804; 809; 370; 755; 518; 836; 706; 913; 422; 626; 809; 816; 225; 984; 333; 605; 940; 734; 14; 399; 684; 489; 496; 909; 415; 309; 177; 957; 344; 992; 479; 438; 925; 273; 544; 414; 479; 20; 487; 49; 300; 698; 832; 944; 138; 791; 67; 509; 445; 95; 699; 464; 340; 653; 750; 360; 893; 928; 30; 107; 354; 499; 226; 203; 326; 109; 991; 281; 854; 538; 538; 225; 306; 723; 519; 32; 949; 677; 153; 52; 262; 63; 911; 221; 436; 776; 27; 528; 965; 431; 265; 196; 168; 954; 480; 905; 231; 959; 246; 949; 690; 205; 349; 394; 841; 450; 553; 962; 35; 793; 138; 171; 961; 407; 671; 155; 341; 265; 541; 243; 700; 853; 842; 745; 683; 169; 857; 927; 878; 912; 451; 816; 625; 198; 750; 892; 85; 343; 557; 300; 446; 767; 984; 706; 738; 428; 163; 250; 268; 317; 53; 303; 76; 172; 312; 711; 387; 965; 483; 781; 375; 34; 391; 570; 193; 386; 168; 94; 475; 54; 835; 899; 992; 228; 191; 207; 630; 497; 244; 802; 595; 903; 244; 98; 555; 410; 432])] in let toped = Topol.topol data in verify data toped) );
assert ((let data = [(448, [975; 574; 251; 397; 564; 820; 626; 136; 233; 13; 337; 572; 833; 479; 738; 527; 763; 698; 621; 835; 121; 562; 737; 278; 395; 146; 318; 0; 563; 874; 720; 965; 443; 942; 252; 584; 663; 956; 164; 149; 242; 148; 891; 412; 853; 408; 802; 723; 206; 795; 363; 317; 274; 779; 735; 9; 943; 111; 168; 6; 986; 481; 983; 888; 572; 985; 482; 422; 654; 166; 528; 883; 339; 828; 295; 611; 272; 961; 545; 372; 51; 23; 837; 372; 731; 40; 979; 558; 189; 93; 935; 233; 119; 818; 452; 206; 630; 68; 924; 74; 980; 841; 194; 633; 588; 324; 456; 705; 900; 504; 872; 383; 928; 57; 86; 598; 351; 162; 271; 363; 350; 398; 307; 567; 189; 667; 691; 705; 82; 773; 988; 366; 902; 847; 332; 677; 922; 590; 134; 977; 688; 671; 102; 832; 574; 368; 920; 365; 441; 789; 500; 918; 786; 957; 919; 428; 758; 154; 302; 917; 208; 868; 404; 772; 829; 201; 284; 96; 314; 553; 662; 837; 555; 501; 689; 434; 451; 160; 641; 596; 906; 377; 403; 173; 553; 145; 776; 969; 3; 107; 397; 823; 76; 581; 320; 673; 135; 443; 972; 154; 916; 576; 728; 834; 687; 125; 505; 618; 402; 614; 652; 607; 151; 8; 525; 196; 629; 825; 464; 151; 902; 651; 944; 162; 616; 94; 94; 522; 644; 556; 774; 838; 769; 858; 940; 118; 221; 238; 650; 195; 511; 764; 359; 849; 214; 587; 902; 935; 782; 224; 397; 418; 600; 435; 179; 876; 615; 676; 892; 582; 750; 78; 981; 32; 99; 716; 67; 117; 645; 782; 122; 529; 24; 225; 574; 320; 848; 317; 804; 591; 295; 418; 623; 68; 615; 698; 707; 745; 739; 216; 857; 948; 436; 682; 923; 821; 748; 139; 107; 729; 549; 577; 113; 999; 747; 990; 613; 520; 821; 476; 6; 862; 791; 477; 568; 800; 461; 100; 944; 119; 787; 941; 992; 908; 52; 565; 421; 26; 473; 599; 549; 342; 494; 158; 418; 449; 449; 981; 329; 816; 63; 421; 642; 623; 256; 912; 957; 541; 438; 352; 398; 727; 671; 309; 180; 199; 882; 960; 385; 131; 534; 438; 0; 847; 439; 588; 24; 162; 209; 649; 843; 905; 649; 590; 723; 41; 262; 482; 735; 864; 497; 276; 479; 155; 69; 912; 168; 443; 548; 840; 226; 104; 791; 492; 978; 998; 767; 48; 900; 16; 465; 291; 803; 388; 684; 934; 95; 316; 229; 101; 862; 235]); (367, [727; 429; 636; 519; 870; 432; 636; 992; 268; 36; 37; 368; 93; 97; 904; 619; 764; 781; 254; 436; 801; 104; 857; 952; 259; 640; 264; 650; 564; 117; 49; 225; 649; 557; 289; 452; 909; 505; 146; 88; 53; 672; 33; 184; 420; 409; 927; 136; 49; 601; 665; 226; 669; 89; 319; 516; 586; 891; 34; 238; 527; 130; 848; 189; 795; 348; 347; 905; 481; 330; 535; 643; 731; 482; 770; 570; 456; 603; 630; 539; 884; 170; 455; 331; 386; 892; 212; 456; 760; 936; 107; 4; 26; 637; 404; 411; 937; 387; 411; 843; 760; 155; 349; 325; 727; 323; 773; 151; 702; 253; 149; 112; 121; 92; 121; 527; 927; 210; 618; 410; 407; 815; 304; 437; 569; 216; 89; 253; 758; 267; 611; 311; 895; 384; 385; 604; 36; 362; 209; 867; 782; 30; 686; 169; 329; 118; 525; 410; 61; 197; 144; 516; 618; 145; 82; 459; 257; 971; 936; 930; 280; 414; 956; 651; 301; 918; 275; 954; 606; 4; 0; 525; 986; 423; 253; 895; 186; 130; 355; 911; 960; 134; 330; 639; 807; 220; 167; 261; 885; 285; 134; 96; 591; 22; 886; 258; 40; 241; 724; 454; 742; 223; 48; 958; 52; 819; 994; 808; 166; 863; 130; 839; 894; 462; 637; 997; 670; 768; 606; 44; 890; 32; 36; 152; 98; 615; 492; 27; 203; 439; 710; 185; 989; 323; 783; 970; 240; 869; 3; 813; 550; 194; 450; 830; 242; 91; 875; 429; 922; 73; 604; 825; 24; 279; 745; 387; 48; 541; 162; 903; 562; 130; 780; 173; 312; 736; 192; 912; 32; 390; 935; 239; 849; 345; 285; 910; 819; 749; 216; 514; 547; 942; 667; 118; 713; 576; 207; 636; 6; 861; 780; 159; 656; 440; 687; 118; 340; 104; 547; 333; 265; 137; 30; 217; 524; 655; 156; 905; 400; 973; 176; 242; 365; 302; 108; 409; 467; 328; 477; 13; 390; 108; 379; 705; 118; 595; 210; 438; 847; 621; 742; 909; 159; 241; 354; 308; 415; 347; 849; 297; 911; 882; 142; 991; 296; 513; 620; 765; 320; 935; 913; 712; 87; 728; 403; 157; 983; 797; 863; 20; 74; 645; 896; 91; 60; 97; 913; 186; 826; 598; 623; 528; 18; 345; 102; 525; 11; 651; 291; 768; 604; 231; 561; 630; 546; 105; 842; 65; 181; 88; 227; 231; 539; 246; 493; 195; 867; 647; 882; 768; 501; 982; 326; 392; 144; 488; 991; 273; 162; 297; 129; 918; 608; 593; 778; 844; 923; 649; 394; 695; 245; 264; 320; 58; 99; 635; 203])] in let toped = Topol.topol data in verify data toped) );
